{"version":3,"file":"static/js/889.8de2d7ec.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Input/Input.module.css?1f33","components/Input/Input.jsx","webpack://react-homework-template/./src/components/Form/Form.module.css?89ba","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/selectors.js","components/Form/Form.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/ContactApp/ContactApp.module.css?3cee","components/ContactApp/ContactApp.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Input_label__NXpCD\",\"input\":\"Input_input__E5rzA\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport css from './Input.module.css';\nimport { nanoid } from '@reduxjs/toolkit';\n\nconst Input = ({\n  label,\n  type,\n  dataName,\n  validation,\n  title,\n  functionChange,\n  stateField,\n}) => {\n  const idForLabelAndInput = nanoid();\n  return (\n    <label className={css.label} htmlFor={idForLabelAndInput}>\n      {label}\n      <input\n        className={css.input}\n        type={type}\n        name={dataName}\n        pattern={validation}\n        title={title}\n        required\n        onChange={functionChange}\n        value={stateField}\n        id={idForLabelAndInput}\n      />\n    </label>\n  );\n};\n\nInput.propTypes = {\n  label: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  dataName: PropTypes.string.isRequired,\n  validation: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  functionChange: PropTypes.func.isRequired,\n  stateField: PropTypes.string.isRequired,\n};\n\nexport default Input;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__e1yzW\",\"form_label\":\"Form_form_label__P+0MD\"};","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.filter;\nexport const selectLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFiltered = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import React, { useState } from 'react';\nimport css from './Form.module.css';\nimport Input from '../Input/Input';\nimport Button from '../Button/Button';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport operations from '../../redux/contacts/opContacts';\nimport { nanoid } from '@reduxjs/toolkit';\n\nexport const Form = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const submitForm = () => {\n    if (contacts.filter(contact => contact.name === name).length !== 1) {\n      let contact = { name: name, number: number, id: nanoid() };\n      dispatch(operations.postContactOnList(contact));\n    } else {\n      alert(`${name} is already in contacts.`);\n    }\n  };\n\n  const formReset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const changeHandler = event => {\n    const { name, value } = event.target;\n    if (name === 'name') {\n      setName(value);\n    } else {\n      setNumber(value);\n    }\n  };\n  const idForLabelAndAddContacts = nanoid();\n  return (\n    <>\n      <label className={css.form_label} htmlFor={idForLabelAndAddContacts}>\n        Add contact below\n      </label>\n      <form\n        onSubmit={event => {\n          event.preventDefault();\n          submitForm();\n          formReset();\n        }}\n        className={css.form}\n        id={idForLabelAndAddContacts}\n      >\n        <Input\n          label=\"Name\"\n          type=\"text\"\n          dataName=\"name\"\n          validation=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          functionChange={changeHandler}\n          stateField={name}\n        />\n        <Input\n          label=\"Number\"\n          type=\"tel\"\n          dataName=\"number\"\n          validation=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          functionChange={changeHandler}\n          stateField={number}\n        />\n        <Button label=\"Add contact\" typeOfButton=\"submit\" />\n      </form>\n    </>\n  );\n};\n\n//     <form className={css.contact_form} onSubmit={handleSubmit}>\n//       <span className={css.contact_span}>Name</span>\n//       <input\n//         className={css.contact_input}\n//         type=\"text\"\n//         name=\"name\"\n//         pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//         title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//         value={name}\n//         onChange={handleChange}\n//         required\n//       />\n//       <span className={css.contact_span}>Number</span>\n//       <input\n//         className={css.contact_input}\n//         type=\"tel\"\n//         name=\"number\"\n//         pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//         title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//         value={number}\n//         onChange={handleChange}\n//         required\n//       />\n//     </form>\n\nexport default Form;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contactList_item\":\"ContactList_contactList_item__463w8\",\"contactList_name\":\"ContactList_contactList_name__yZzm1\",\"contactList_number\":\"ContactList_contactList_number__qBnbA\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '../Button/Button';\nimport css from './ContactList.module.css';\n\nconst ContactList = ({ arr, buttonHandler }) => {\n  return (\n    <ul className={css.contactList}>\n      {arr.map(({ id, name, number }) => (\n        <li className={css.contactList_item} key={id}>\n          <p className={css.contactList_name}>{`${name}`}</p>\n          <p className={css.contactList_number}> {`${number}`}</p>{' '}\n          <Button\n            label=\"Delete\"\n            typeOfButton=\"button\"\n            buttonFunction={() => buttonHandler(id)}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  arr: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  buttonHandler: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactApp_container__EA+Ys\"};","import React, { useEffect } from 'react';\nimport { Form } from '../Form/Form';\nimport Input from '../Input/Input';\nimport ContactList from '../ContactList/ContactList';\nimport {\n  selectFilter,\n  selectFiltered,\n  selectError,\n  selectLoading,\n} from '../../redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/filterSlice';\nimport operations from '../../redux/contacts/opContacts';\nimport css from './ContactApp.module.css';\n\nexport const ContactsApp = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const filtered = useSelector(selectFiltered);\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectLoading);\n\n  const filterHandler = event => {\n    const { name, value } = event.target;\n    if (name === 'filter') {\n      dispatch(setFilter(value));\n    }\n  };\n\n  const removeContact = id => {\n    dispatch(operations.deleteContact(id));\n  };\n\n  useEffect(() => {\n    dispatch(operations.fetchDisplayContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={css.container}>\n      <Form />\n      <Input\n        label=\"Find contacts by name\"\n        type=\"text\"\n        dataName=\"filter\"\n        validation=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Search isn't case sensitive.\"\n        functionChange={filterHandler}\n        stateField={filter}\n      />\n      <ContactList arr={filtered} buttonHandler={removeContact} />\n      {isLoading && !error && <b>Request in progress...</b>}\n    </div>\n  );\n};\n\nexport default ContactsApp;\n","import React from 'react';\nimport ContactApp from '../components/ContactApp/ContactApp';\nimport css from './Pages.module.css';\n\nconst Contacts = () => {\n  return (\n    <div className={css.background}>\n      <ContactApp />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["label","type","dataName","validation","title","functionChange","stateField","idForLabelAndInput","nanoid","className","css","htmlFor","name","pattern","required","onChange","value","id","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectContacts","state","contacts","selectFilter","filter","selectLoading","isLoading","selectError","error","selectFiltered","contact","toLowerCase","includes","Form","dispatch","useDispatch","useSelector","useState","setName","number","setNumber","changeHandler","event","target","idForLabelAndAddContacts","onSubmit","preventDefault","operations","alert","submitForm","Input","Button","typeOfButton","arr","buttonHandler","buttonFunction","filtered","useEffect","setFilter","ContactApp"],"sourceRoot":""}