{"version":3,"file":"static/js/718.3aa1d4f2.chunk.js","mappings":"oPACA,EAA+B,6BAA/B,EAA0E,4BAA1E,EAAqH,6B,SCsBrH,EApBe,SAAC,GAA0B,IAAxBA,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SACxB,OACE,mBAAOC,UAAWC,EAAlB,WACE,iBAAMD,UAAWC,EAAjB,oCACA,kBACED,UAAWC,EACXC,KAAK,OACLC,KAAK,SACLC,MAAON,EACPC,SAAUA,MAIjB,ECGGM,EAAS,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOL,CACR,EClCD,EAA4B,8BC6D5B,EAlDmB,WACjB,IAAMQ,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,aACvBrB,GAASoB,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,WACrBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IACpBC,GAAYJ,EAAAA,EAAAA,IAAYK,EAAAA,IA+B9B,OAJAC,EAAAA,EAAAA,YAAU,WACRT,EAASU,EAAAA,EAAAA,uBACV,GAAE,CAACV,KAGF,iBAAKf,UAAWC,EAAhB,WACE,SAACyB,EAAA,EAAD,CAAaT,SAAUA,EAAUU,SA/BlB,SAAC,GAAsB,IAApBxB,EAAmB,EAAnBA,KAAMyB,EAAa,EAAbA,OACpBC,EAAa,CAAE1B,KAAAA,EAAMyB,OAAAA,EAAQrB,GAAIF,KAEnCY,EAASa,MAAK,SAAAC,GAAO,OAAI5B,IAAS4B,EAAQ5B,IAArB,IACvB6B,MAAM,mCAIRjB,GAASkB,EAAAA,EAAAA,GAAUJ,GACpB,KAwBG,SAAC,EAAD,CAAQ/B,OAAQA,EAAQC,SAtBP,SAAAmC,GACnBnB,GAASkB,EAAAA,EAAAA,GAAUC,EAAMC,OAAO/B,OACjC,KAqBG,SAACgC,EAAA,EAAD,CACEnB,SAhBsB,SAACA,EAAUnB,GACrC,OAAOmB,EAASnB,QAAO,SAAAiC,GAAO,OAC5BA,EAAQ5B,KAAKkC,cAAcC,SAASxC,EAAOuC,cADf,GAG/B,CAYeE,CAAoBtB,EAAUnB,GACxC0C,gBArBgB,SAAAjC,GACpBQ,EAASU,EAAAA,EAAAA,cAAyBlB,GACnC,IAqBIe,IAAcF,IAAS,oDAG7B,E,QChDD,EARiB,WACf,OACE,gBAAKpB,UAAWC,EAAAA,EAAAA,WAAhB,UACE,SAAC,EAAD,KAGL,C","sources":["webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/ContactApp/ContactApp.module.css?3cee","components/ContactApp/ContactApp.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"filter_label\":\"Filter_filter_label__5ITod\",\"filter_name\":\"Filter_filter_name__MPkjv\",\"filter_input\":\"Filter_filter_input__eu2zm\"};","import PropTypes from 'prop-types';\nimport css from './Filter.module.css';\n\nconst Filter = ({ filter, onChange }) => {\n  return (\n    <label className={css.filter_label}>\n      <span className={css.filter_name}>Find contacts by name</span>\n      <input\n        className={css.filter_input}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={onChange}\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactApp_container__EA+Ys\"};","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectLoading, selectError } from '../../redux/contacts/selectors';\nimport selectors from '../../redux/contacts/selectors';\nimport { setFilter } from '../../redux/contacts/filterSlice';\nimport operations from '../../redux/contacts/opContacts';\nimport ContactForm from '../ContactForm/ContactForm';\nimport ContactList from '../ContactList/ContactList';\nimport Filter from '../Filter/Filter';\nimport { nanoid } from 'nanoid';\nimport css from './ContactApp.module.css';\n\nconst ContactApp = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectors.getContacts);\n  const filter = useSelector(selectors.getFilter);\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectLoading);\n\n  const submitForm = ({ name, number }) => {\n    const newContact = { name, number, id: nanoid() };\n\n    if (contacts.some(contact => name === contact.name)) {\n      alert(`{$name} is already in contacts.`);\n      return;\n    }\n\n    dispatch(setFilter(newContact));\n  };\n\n  const changeFilter = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  const deleteContact = id => {\n    dispatch(operations.deleteContact(id));\n  };\n\n  const getFilteredContacts = (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  useEffect(() => {\n    dispatch(operations.fetchDisplayContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={css.container}>\n      <ContactForm contacts={contacts} onSubmit={submitForm} />\n\n      <Filter filter={filter} onChange={changeFilter} />\n      <ContactList\n        contacts={getFilteredContacts(contacts, filter)}\n        onDeleteContact={deleteContact}\n      />\n      {isLoading && !error && <b>Request in progress...</b>}\n    </div>\n  );\n};\n\nexport default ContactApp;\n","import React from 'react';\nimport ContactApp from '../components/ContactApp/ContactApp';\nimport css from './Pages.module.css';\n\nconst Contacts = () => {\n  return (\n    <div className={css.background}>\n      <ContactApp />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["filter","onChange","className","css","type","name","value","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","dispatch","useDispatch","contacts","useSelector","selectors","error","selectError","isLoading","selectLoading","useEffect","operations","ContactForm","onSubmit","number","newContact","some","contact","alert","setFilter","event","target","ContactList","toLowerCase","includes","getFilteredContacts","onDeleteContact"],"sourceRoot":""}